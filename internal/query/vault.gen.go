// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/haierkeys/obsidian-better-sync-service/internal/model"
)

func newVault(db *gorm.DB, opts ...gen.DOOption) vault {
	_vault := vault{}

	_vault.vaultDo.UseDB(db, opts...)
	_vault.vaultDo.UseModel(&model.Vault{})

	tableName := _vault.vaultDo.TableName()
	_vault.ALL = field.NewAsterisk(tableName)
	_vault.ID = field.NewInt64(tableName, "id")
	_vault.Vault = field.NewString(tableName, "vault")
	_vault.Action = field.NewString(tableName, "action")
	_vault.NoteCount = field.NewInt64(tableName, "note_count")
	_vault.Size = field.NewInt64(tableName, "size")
	_vault.CreatedAt = field.NewField(tableName, "created_at")
	_vault.UpdatedAt = field.NewField(tableName, "updated_at")

	_vault.fillFieldMap()

	return _vault
}

type vault struct {
	vaultDo vaultDo

	ALL       field.Asterisk
	ID        field.Int64
	Vault     field.String
	Action    field.String
	NoteCount field.Int64
	Size      field.Int64
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (v vault) Table(newTableName string) *vault {
	v.vaultDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vault) As(alias string) *vault {
	v.vaultDo.DO = *(v.vaultDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vault) updateTableName(table string) *vault {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.Vault = field.NewString(table, "vault")
	v.Action = field.NewString(table, "action")
	v.NoteCount = field.NewInt64(table, "note_count")
	v.Size = field.NewInt64(table, "size")
	v.CreatedAt = field.NewField(table, "created_at")
	v.UpdatedAt = field.NewField(table, "updated_at")

	v.fillFieldMap()

	return v
}

func (v *vault) WithContext(ctx context.Context) IVaultDo { return v.vaultDo.WithContext(ctx) }

func (v vault) TableName() string { return v.vaultDo.TableName() }

func (v vault) Alias() string { return v.vaultDo.Alias() }

func (v vault) Columns(cols ...field.Expr) gen.Columns { return v.vaultDo.Columns(cols...) }

func (v *vault) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vault) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 7)
	v.fieldMap["id"] = v.ID
	v.fieldMap["vault"] = v.Vault
	v.fieldMap["action"] = v.Action
	v.fieldMap["note_count"] = v.NoteCount
	v.fieldMap["size"] = v.Size
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
}

func (v vault) clone(db *gorm.DB) vault {
	v.vaultDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vault) replaceDB(db *gorm.DB) vault {
	v.vaultDo.ReplaceDB(db)
	return v
}

type vaultDo struct{ gen.DO }

type IVaultDo interface {
	gen.SubQuery
	Debug() IVaultDo
	WithContext(ctx context.Context) IVaultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVaultDo
	WriteDB() IVaultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVaultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVaultDo
	Not(conds ...gen.Condition) IVaultDo
	Or(conds ...gen.Condition) IVaultDo
	Select(conds ...field.Expr) IVaultDo
	Where(conds ...gen.Condition) IVaultDo
	Order(conds ...field.Expr) IVaultDo
	Distinct(cols ...field.Expr) IVaultDo
	Omit(cols ...field.Expr) IVaultDo
	Join(table schema.Tabler, on ...field.Expr) IVaultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVaultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVaultDo
	Group(cols ...field.Expr) IVaultDo
	Having(conds ...gen.Condition) IVaultDo
	Limit(limit int) IVaultDo
	Offset(offset int) IVaultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVaultDo
	Unscoped() IVaultDo
	Create(values ...*model.Vault) error
	CreateInBatches(values []*model.Vault, batchSize int) error
	Save(values ...*model.Vault) error
	First() (*model.Vault, error)
	Take() (*model.Vault, error)
	Last() (*model.Vault, error)
	Find() ([]*model.Vault, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Vault, err error)
	FindInBatches(result *[]*model.Vault, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Vault) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVaultDo
	Assign(attrs ...field.AssignExpr) IVaultDo
	Joins(fields ...field.RelationField) IVaultDo
	Preload(fields ...field.RelationField) IVaultDo
	FirstOrInit() (*model.Vault, error)
	FirstOrCreate() (*model.Vault, error)
	FindByPage(offset int, limit int) (result []*model.Vault, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVaultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vaultDo) Debug() IVaultDo {
	return v.withDO(v.DO.Debug())
}

func (v vaultDo) WithContext(ctx context.Context) IVaultDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vaultDo) ReadDB() IVaultDo {
	return v.Clauses(dbresolver.Read)
}

func (v vaultDo) WriteDB() IVaultDo {
	return v.Clauses(dbresolver.Write)
}

func (v vaultDo) Session(config *gorm.Session) IVaultDo {
	return v.withDO(v.DO.Session(config))
}

func (v vaultDo) Clauses(conds ...clause.Expression) IVaultDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vaultDo) Returning(value interface{}, columns ...string) IVaultDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vaultDo) Not(conds ...gen.Condition) IVaultDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vaultDo) Or(conds ...gen.Condition) IVaultDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vaultDo) Select(conds ...field.Expr) IVaultDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vaultDo) Where(conds ...gen.Condition) IVaultDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vaultDo) Order(conds ...field.Expr) IVaultDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vaultDo) Distinct(cols ...field.Expr) IVaultDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vaultDo) Omit(cols ...field.Expr) IVaultDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vaultDo) Join(table schema.Tabler, on ...field.Expr) IVaultDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vaultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVaultDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vaultDo) RightJoin(table schema.Tabler, on ...field.Expr) IVaultDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vaultDo) Group(cols ...field.Expr) IVaultDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vaultDo) Having(conds ...gen.Condition) IVaultDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vaultDo) Limit(limit int) IVaultDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vaultDo) Offset(offset int) IVaultDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vaultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVaultDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vaultDo) Unscoped() IVaultDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vaultDo) Create(values ...*model.Vault) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vaultDo) CreateInBatches(values []*model.Vault, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vaultDo) Save(values ...*model.Vault) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vaultDo) First() (*model.Vault, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vault), nil
	}
}

func (v vaultDo) Take() (*model.Vault, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vault), nil
	}
}

func (v vaultDo) Last() (*model.Vault, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vault), nil
	}
}

func (v vaultDo) Find() ([]*model.Vault, error) {
	result, err := v.DO.Find()
	return result.([]*model.Vault), err
}

func (v vaultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Vault, err error) {
	buf := make([]*model.Vault, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vaultDo) FindInBatches(result *[]*model.Vault, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vaultDo) Attrs(attrs ...field.AssignExpr) IVaultDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vaultDo) Assign(attrs ...field.AssignExpr) IVaultDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vaultDo) Joins(fields ...field.RelationField) IVaultDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vaultDo) Preload(fields ...field.RelationField) IVaultDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vaultDo) FirstOrInit() (*model.Vault, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vault), nil
	}
}

func (v vaultDo) FirstOrCreate() (*model.Vault, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vault), nil
	}
}

func (v vaultDo) FindByPage(offset int, limit int) (result []*model.Vault, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vaultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vaultDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vaultDo) Delete(models ...*model.Vault) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vaultDo) withDO(do gen.Dao) *vaultDo {
	v.DO = *do.(*gen.DO)
	return v
}
